generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// user
model User {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  thumbnail  String?
  address    Address?
  email      String         @unique
  password   String
  comment    Comment[]
  myFavorite UserFavorite[]
  myCoffee   UserCoffee[]
  Cafe       Cafe[]
}

model Address {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  country  String?
  district String?
  location String?
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique @db.ObjectId
}

// cafe
model Cafe {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String         @default("unknown")
  phone        String?
  url          String?
  address      CafeAddress?
  time         Time?
  price        String?
  menu         Menu[]
  img          Image[]
  stars        Int            @default(1)
  rank         Rank?
  limited_time String?
  user         User?          @relation(fields: [userId], references: [id])
  userId       String?        @db.ObjectId
  comment      Comment[]
  favoritedBy  UserFavorite[]
  ownedBy      UserCoffee[]
}

model CafeAddress {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  country   String  @default("unknown")
  districts String  @default("unknown")
  location  String? @default("unknown")
  mrt       String?
  latitude  Float?
  longitude Float?
  cafe      Cafe    @relation(fields: [cafeId], references: [id])
  cafeId    String  @unique @db.ObjectId
}

model Time {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  open_time String
  cafe      Cafe   @relation(fields: [cafeId], references: [id])
  cafeId    String @unique @db.ObjectId
}

model Menu {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  pic    String
  cafe   Cafe   @relation(fields: [cafeId], references: [id])
  cafeId String @db.ObjectId
}

model Image {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  pic    String
  cafe   Cafe   @relation(fields: [cafeId], references: [id])
  cafeId String @db.ObjectId
}

model Rank {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  wifi   Int?
  seat   Int?
  quiet  Int?
  tasty  Int?
  cheap  Int?
  music  Int?
  cafe   Cafe   @relation(fields: [cafeId], references: [id])
  cafeId String @unique @db.ObjectId
}

// comment
model Comment {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  cafe   Cafe     @relation(fields: [cafeId], references: [id])
  cafeId String   @db.ObjectId
  user   User     @relation(fields: [userId], references: [id])
  userId String   @db.ObjectId
  stars  Int
  tags   String[]
  post   String?
  time   DateTime @default(now())
}

// admin
model Admin {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  password  String
  name      String @default("admin")
  charactor String
}

model UserFavorite {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  cafe   Cafe   @relation(fields: [cafeId], references: [id])
  cafeId String @db.ObjectId

  @@unique([userId, cafeId])
}

model UserCoffee {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  cafe   Cafe   @relation(fields: [cafeId], references: [id])
  cafeId String @db.ObjectId

  @@unique([userId, cafeId])
}

model Area {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  districts District[]
}

model District {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  zipcode Int
  name    String
  area    Area?   @relation(fields: [areaId], references: [id])
  areaId  String? @db.ObjectId
}
